{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "hostingEnvironment": {
            "type": "string",
            "allowedValues": [
                "linux",
                "windows"
            ]            
        },
        "deploymentType": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev",
                "prod"
            ]
        },
        "appName": {
            "type": "string"
        },
        "appSku": {
            "type": "string"
        },
        "appWorkerSize": {
            "type": "string"
        },
        "appStorageAccountSize": {
            "type": "string"
        },
        "storageSku": {
            "type": "string"
        },
        "storageTier": {
            "type": "string"
        },
        "accessTier": {
            "type": "string"
        },
        "enableAutomaticFailover": {
            "type": "bool"
        },
        "enableMultipleWriteLocations": {
            "type": "bool"
        },
        "isVirtualNetworkFilterEnabled": {
            "type": "bool"
        },
        "isZoneRedundant": {
            "type": "bool"
        },
        "databaseAccountsName": {
            "type": "string"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues":[
                "eastus",
                "westus"
            ],
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "queueStorageAccountsName": {
            "type": "string"
        },
        "insights": {
            "type": "string"
        },    
        "resourcePrefix": {
            "type": "string"
        },
        "tag_owner": {
            "type": "string"
        }                      
    },

    "variables": Â {
        "functionAppName": "[parameters('appName')]",
        "queueName": "js-queue-items",
        "prodFunctionName": "producer",
        "consFunctionName": "consumer",
        "hostingPlanName": "[concat(parameters('appName'), '-plan')]",
        "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'functions')]",
        "applicationInsightsName": "[concat(parameters('appName'), '-insights')]",
        "databaseConnectionString": "[concat(parameters('databaseAccountsName'), '_DOCUMENTDB')]",
        "functionAppResourceId": "[resourceId('Microsoft.Web/site', variables('functionAppName'))]",
        "service_mytesttdapi_name": "tdtestapi99"
    },

    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('appStorageAccountSize')]"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-11-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "sku":{
                "name": "[parameters('appSku')]"
            },
            "properties": {
                "workerSize": "[parameters('appWorkerSize')]",
                "numberOfWorkers": 1
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[parameters('queueStorageAccountsName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('storageSku')]",
                "tier": "[parameters('storageTier')]"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "[parameters('accessTier')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-04-01",
            "name": "[concat(parameters('queueStorageAccountsName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('queueStorageAccountsName'))]"
            ],
            "sku": {
                "name": "[parameters('storageSku')]"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },        
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2019-08-01",
            "name": "[parameters('databaseAccountsName')]",
            "location": "[parameters('location')]",
            "tags": {
                "defaultExperience": "Azure Cosmos DB for MongoDB API",
                "hidden-cosmos-mmspecial": "",
                "Owner": "[parameters('tag_owner')]"
            },
            "kind": "GlobalDocumentDB",
            "properties": {
                "enableAutomaticFailover": "[parameters('enableAutomaticFailover')]",
                "enableMultipleWriteLocations": "[parameters('enableMultipleWriteLocations')]",
                "isVirtualNetworkFilterEnabled": "[parameters('isVirtualNetworkFilterEnabled')]",
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session",
                    "maxIntervalInSeconds": 5,
                    "maxStalenessPrefix": 100
                },
                "locations": [
                    {
                        "locationName": "West Europe",
                        "provisioningState": "Succeeded",
                        "failoverPriority": 0,
                        "isZoneRedundant": "[parameters('isZoneRedundant')]"
                    }
                ],
                "capabilities": []
            }           
        },
        {
            "apiVersion": "2018-11-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountsName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('queueStorageAccountsName'))]"
            ],
            "properties": {
                "name": "[variables('functionAppName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "clientAffinityEnabled": false,
                "hostingEnvironment": "[parameters('hostingEnvironment')]",
                "siteConfig": {
                    "alwaysOn": true,
                    "cors": {
                        "allowedOrigins": [
                            "*"
                        ]
                    },
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~1"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-11-01').keys[0].value,';')]"
                        },
                        {
                            "name": "AzureWebJobsDashboard",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-11-01').keys[0].value,';')]"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "~10"
                        }
                    ]
                }
            },
            "tags": {
                "Owner": "[parameters('tag_owner')]"
            }            
        },
            {
                "apiVersion": "2018-11-01",
                "name": "[concat(variables('functionAppName'),'/', variables('prodFunctionName'))]",
                "type": "Microsoft.Web/sites/functions",
                "dependsOn": [
                    "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
                ],
                "properties": {
                    "config": {
                        "bindings": [
                            {
                                "authLevel": "anonymous",
                                "type": "httpTrigger",
                                "direction": "in",
                                "name": "req",
                                "methods": [
                                    "get",
                                    "post"
                                ]
                            },
                            {
                                "type": "http",
                                "direction": "out",
                                "name": "res"
                            },
                            {
                                "type": "queue",
                                "name": "outputQueueItems",
                                "queueName": "[variables('queueName')]",
                                "connection": "AzureWebJobsStorage",
                                "direction": "out"
                              }                            
                        ]
                    },
                    "files": {
                        "index.js": "module.exports = function (context, req, outputQueueItems) { \r\n\r\n context.log('Drive Gear Temperature Service triggered'); \r\n\r\n var items = []; \r\n\r\n var item = {}; \r\n\r\n if (req.body && req.body.readings) { \r\n\r\n req.body.readings.forEach(function(reading) { \r\n\r\n if(reading.temperature<=25) { \r\n\r\n reading.status = 'OK'; }  else if (reading.temperature<=50) { \r\n\r\n reading.status = 'CAUTION'; \r\n\r\n } else { \r\n\r\n reading.status = 'DANGER'; \r\n\r\n } \r\n\r\n context.log('Reading is ' + reading.status); \r\n\r\n item = { \r\n\r\n timestamp: reading.timestamp, \r\n\r\n gearId: reading.driveGearId, \r\n\r\n temperature: reading.temperature, \r\n\r\n reading: reading.status \r\n\r\n } \r\n\r\n /* context.bindings.outputQueueItem = 'Reading is ' + reading.status; */ \r\n\r\n items.push(item); \r\n\r\n }); \r\n\r\n context.bindings.outputQueueItems = items; \r\n\r\n context.res = { \r\n\r\n /* status: 200, Defaults to 200 */ \r\n\r\n body: { \r\n\r\n 'readings': req.body.readings  \r\n\r\n} \r\n\r\n }; \r\n\r\n } else { \r\n\r\n context.res = { \r\n\r\n status: 400, \r\n\r\n body: 'Please send an array of readings in the request body' \r\n\r\n }; \r\n\r\n } context.done(); \r\n\r\n };"
                    }
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[concat(variables('functionAppName'),'/', variables('consFunctionName'))]",
            "type": "Microsoft.Web/sites/functions",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "properties": {
                "config": {
                    "bindings": [
                        {
                          "name": "myQueueItem",
                          "type": "queueTrigger",
                          "direction": "in",
                          "queueName": "[variables('queueName')]",
                          "connection": "AzureWebJobsStorage"
                        },
                        {
                          "type": "documentDB",
                          "name": "outputDocument",
                          "databaseName": "thingsdatabase",
                          "collectionName": "nodeitems",
                          "createIfNotExists": true,
                          "connection": "[concat('AccountEndpoint=https://', parameters('databaseAccountsName'), '.documents.azure.com:443/;Accountkey=', listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('databaseAccountsName')), '2015-04-08').primaryMasterKey, ';')]",
                          "direction": "out"
                        }
                    ]
                },
                "files": {
                    "index.js": "module.exports = function (context, myQueueItem) { \r\n\r\n context.log('JavaScript queue trigger function processed work item', myQueueItem); \r\n\r\n context.bindings.outputDocument = JSON.stringify({ \r\n\r\n id: context.bindings.myQueueItem.gearId + '-' + context.bindings.myQueueItem.timestamp, \r\n\r\n gearId: context.bindings.myQueueItem.gearId, \r\n\r\n temperature: context.bindings.myQueueItem.temperature, \r\n\r\n reading: context.bindings.myQueueItem.reading }); \r\n\r\n context.log('Item written to the database'); \r\n\r\n context.done(); \r\n\r\n };"
                }
        }
    },        
        {
            "name": "[variables('applicationInsightsName')]",
            "condition": "[equals(parameters('insights'),'yes')]",
            "type": "Microsoft.Insights/components",
            "location": "[parameters('location')]",
            "apiVersion": "2014-04-01",
            "kind": "other",
            "properties": {
                "applicationId": "[variables('applicationInsightsName')]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2019-01-01",
            "name": "[variables('service_mytesttdapi_name')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Developer",
                "capacity": 1
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "properties": {
                "publisherEmail": "alen@tdsolutionfactory.onmicrosoft.com",
                "publisherName": "mytdtest",
                "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
                "hostnameConfigurations": [
                    {
                        "type": "Proxy",
                        "hostName": "[concat(variables('service_mytesttdapi_name'), '.azure-api.net')]",
                        "negotiateClientCertificate": false,
                        "defaultSslBinding": true
                    }
                ],
                "customProperties": {
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "False"
                },
                "virtualNetworkType": "None"
            }            
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('service_mytesttdapi_name'), '/', variables('functionAppName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('service_mytesttdapi_name'))]"
            ],
            "properties": {
                "displayName": "variables('functionAppName')",
                "apiRevision": "1",
                "description": "[concat('Import from \"', variables('functionAppName'), '\" Function App",
                "subscriptionRequired": false,
                "path": "variables('functionAppName')",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('service_mytesttdapi_name'), '/', variables('functionAppName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('service_mytesttdapi_name'))]"
            ],
            "properties": {
                "description": "[variables('functionAppName')]",
                "url": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/api')]",
                "protocol": "http",
                "resourceId": "[concat('https://management.azure.com', variables('functionAppResourceId'))]",
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('service_mytesttdapi_name'), '/', variables('functionAppName'), '/post-producer')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_mytesttdapi_name'), variables('functionAppName'))]",
                "[resourceId('Microsoft.ApiManagement/service', variables('service_mytesttdapi_name'))]"
            ],
            "properties": {
                "displayName": "[variables('prodFunctionName')]",
                "method": "POST",
                "urlTemplate": "[concat(']', variables('prodFunctionName'))]",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('service_mytesttdapi_name'), '/', variables('functionAppName'), '/post-producer/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('service_mytesttdapi_name'), variables('functionAppName'), 'post-producer')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_mytesttdapi_name'), variables('functionAppName'))]",
                "[resourceId('Microsoft.ApiManagement/service', variables('service_mytesttdapi_name'))]"
            ],
            "properties": {
                "value": "[concat('<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"', variables('functionAppName'), '\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        }        
    ],
    "outputs": {
        "databasePrimaryKey": {
            "type": "string",
            "value": "[listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('databaseAccountsName')), '2015-04-08').primaryMasterKey]"
        },
        "functionEndpoint":{
            "type": "string",
            "value": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/api/', variables('prodFunctionName'))]"
        }        
    }
}